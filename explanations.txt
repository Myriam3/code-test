
// Array tests

1) getNamesOfPeopleOver()
2) getSumOfAllAges()
3) getInterests()
4) getNamesAndInterest()

I've used a method reduce() in these 4 functions to iterate over an array (people) and return either an array of strings for 1) and 3) (instead of the whole objects) or another data structure : number (2) and object (4).

1) I've used reduce() over filter() since the returned array contains only the names and not the whole objects.

3) I've used the method concat() to merge all the arrays of interests, created a new Set data structure to remove duplicates and then converted the Set back to an array.

// Closure tests

5) multiplier()
6) count()

Immediatly invoked function expression to create a closure with count() directly. The incrementation of counter occurs after the value is returned so the value returned at the first call is 0.

// Promises tests

7) getRandomValue()
8) getFourRandomValues()

I've used Promise.all() to resolve all the results of the promises into an array and a for loop to avoid repetition and so the number of random values expected could be increased easily.

I could also have included some type validation (number) for the parameters of the functions getNamesOfPeopleOver(), multiplier(), getRandomValue() and getFourRandomValues(). I didn't to focus on the tests that were expected.

Thank you for taking the time to read my code :)

Myriam